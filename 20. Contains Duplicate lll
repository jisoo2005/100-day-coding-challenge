You are given an integer array nums and two integers indexDiff and valueDiff.

Find a pair of indices (i, j) such that:

i != j,
abs(i - j) <= indexDiff.
abs(nums[i] - nums[j]) <= valueDiff, and
Return true if such pair exists or false otherwise.

 

Example 1:

Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true
Explanation: We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --> 0 != 3
abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0



**********************************************************************https://leetcode.com/problems/contains-duplicate-iii/submissions/********************************************************************************


class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) {
         if (indexDiff <= 0 || valueDiff < 0) return false;
        set<long> arr; 
        for (int i = 0; i < nums.size(); ++i) {
            if (i > indexDiff) {
                arr.erase(nums[i - indexDiff - 1]);
            }

            auto pos = arr.lower_bound((long)nums[i] - valueDiff);
            if (pos != arr.end() && abs(*pos - nums[i]) <= valueDiff) {
                return true;
            }

            arr.insert(nums[i]);
        }

        return false;
    }
};
