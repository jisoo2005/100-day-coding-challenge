
Given the root of a binary tree, return the postorder traversal of its nodes' values.



******************************************************************************************CODE*******************************************************************************************************************


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> result;
        if (!root) return result;
        
        stack<TreeNode*> nodeStack;
        TreeNode* prev = nullptr;
        
        while (root || !nodeStack.empty()) {
            if (root) {
                nodeStack.push(root);
                root = root->left;
            } else {
                TreeNode* topNode = nodeStack.top();
                if (topNode->right && topNode->right != prev) {
                    root = topNode->right;
                } else {
                    result.push_back(topNode->val);
                    nodeStack.pop();
                    prev = topNode;
                }
            }
        }
        
        return result;
    }
};
