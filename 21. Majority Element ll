Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]


*********************************************************************************************CODE**********************************************************************************************************************


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int count1=0;
        int count2=0;
        int n=nums.size();
        int ele1=INT_MIN;
        int ele2=INT_MIN;
        for(int i=0;i<n;i++){
            if(count1==0 && nums[i]!=ele2){
                count1=1;
                ele1=nums[i];
            }
            else if(count2==0 && nums[i]!=ele1){
                count2=1;
                ele2=nums[i];
            }
            else if(nums[i]==ele1) count1++;
            else if(nums[i]==ele2)count2++;
            else {
                count1--,count2--;
                }
        }
        vector<int> result;
        int cnt1=0;
        int cnt2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==ele1){
                cnt1++;
            }
            if((nums[i])==ele2){
                cnt2++;
            }
        }
        if(cnt1>(n/3)) result.push_back(ele1);
        if(cnt2>(n/3)) result.push_back(ele2);
        return result;
    }
};
