Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


*************************************************************************************CODE*************************************************************************************************


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();
        int i=0;
        int j=0;
        int n=n1+n2;
        int ind2=n/2;
        int ind1=ind2-1;
        int cnt=0;
        int ind1el=-1;
        int ind2el=-1;
        while(i<n1 && j<n2){
            if(nums1[i]<nums2[j]){
                if(cnt==ind1) ind1el=nums1[i];
                if(cnt==ind2) ind2el=nums1[i];
                cnt++;
                i++;
            }
            else{
                if(cnt==ind1) ind1el=nums2[j];
                if(cnt==ind2) ind2el=nums2[j];
                cnt++;
                j++;
            }
        }
        while(i<n1){
            if(cnt==ind1 && ind1el==-1) ind1el=nums1[i];
            if(cnt==ind2 && ind2el==-1) ind2el=nums1[i];
            cnt++;
            i++;
        }
        while(j<n2){
            if(cnt==ind1 && ind1el==-1) ind1el=nums2[j];
            if(cnt==ind2 && ind2el==-1) ind2el=nums2[j];
            cnt++;
            j++; 
        }
        if(n%2==1){
            return ind2el;
        }
        return (double)(ind1el+ind2el) / 2.0;
    }
};
