##  Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


###CODE


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    vector<vector<int>> result;
    for(int i=0;i<nums.size()-2;i++){
    if(i>0 && nums[i]==nums[i+1]){
     continue;
    }
    int right=i+1;
    int left=nums.size-1;
    while(right<end){
    int total=nums[i]+nums[start]+nums[left];
    if(total==0){
    result.push_back({nums[i], nums[right], nums[left]});
    while(i>0 && nums[start]==nums[start+1])
    start++;
    while(i>0 && nums[left]==nums[left+1])
    left--;
    }
    left--;
    right++;
    else if(total<0){
                    start++;
                }
                else{
                    end--;
                }
    }
    return result;
    }
    }
